# This is the implementation of a Bazel extra_action which genenerates
# _compile_command files for generate_compile_commands.py to consume.

import json
import subprocess
import sys

# The module below is generated by running protoc on the file below:
#       https://github.com/bazelbuild/bazel/blob/master/src/main/protobuf/extra_actions_base.proto
# For easy reference, a copy of the file is stored in this same directory.
import extra_actions_base_pb2


def main():
    # TODO: Use argparse
    argv = sys.argv
    ifname = argv[1]
    ofname = argv[2]

    action = extra_actions_base_pb2.ExtraActionInfo()
    with open(ifname, 'rb') as f:
        action.MergeFromString(f.read())
    cpp_compile_info = action.Extensions[
            extra_actions_base_pb2.CppCompileInfo.cpp_compile_info]
    cmd = [ cpp_compile_info.tool,
        '-c', cpp_compile_info.source_file,
        '-o', cpp_compile_info.output_file,
    ] + [str(x) for x in cpp_compile_info.compiler_option]
    cmdstr = subprocess.list2cmdline(cmd)
    source_fname = cpp_compile_info.source_file

    data = { 'command': cmdstr, 'file': source_fname }
    # Blacklisted files result in empty json objects.
    # TODO: Formalize the blacklisting of files.
    if source_fname.startswith('third_party/'):
        data = {}
    with open(ofname, 'w') as f:
        json.dump(data, f, sort_keys=True, indent=4)


if __name__ == '__main__':
    main()
